{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\Prog\\\\JS\\\\React\\\\Udemy course\\\\code\\\\section 21(auth)\\\\01-starting-project\\\\frontend\\\\src\\\\pages\\\\Authentication.js\";\nimport { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport jwt from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nexport async function action(_ref) {\n  let {\n    request\n  } = _ref;\n  console.log(\"IN ACTION\", request);\n  const searchParams = new URL(request.url).searchParams;\n  const data = await request.formData();\n  console.log(\"Form data\", data);\n  const mode = searchParams.get('mode');\n  console.log(\"MODE = \", mode);\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({\n      message: \"Unsupported mode.\"\n    }, {\n      status: 422\n    });\n  }\n  console.log(data);\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n  const resp = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(authData)\n  });\n  if (resp.status === 422 || resp.status === 401) {\n    return resp;\n  }\n  if (!resp.ok) {\n    throw json({\n      message: \"Could not authenticate user\"\n    }, {\n      status: 500\n    });\n  }\n  const resData = await resp.json();\n  const token = resData.token;\n\n  //  так можна, але той бекенд повертає фігню по експерейшину, тому я вручну поставлю ескп\n  const dataToken = jwt(token);\n  localStorage.setItem(\"token\", token);\n  localStorage.setItem(\"email\", dataToken.email);\n  localStorage.setItem(\"exp\", dataToken.exp);\n  return redirect(\"/\");\n}\n;\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["json","redirect","AuthForm","jwt","AuthenticationPage","action","request","console","log","searchParams","URL","url","data","formData","mode","get","message","status","authData","email","password","resp","fetch","method","headers","body","JSON","stringify","ok","resData","token","dataToken","localStorage","setItem","exp"],"sources":["C:/Users/Alex/Desktop/Prog/JS/React/Udemy course/code/section 21(auth)/01-starting-project/frontend/src/pages/Authentication.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\nimport AuthForm from '../components/AuthForm';\nimport jwt from \"jwt-decode\";\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\nexport async function action({ request }) {\n  console.log(\"IN ACTION\", request);\n  const searchParams = new URL(request.url).searchParams;\n  const data = await request.formData();\n  console.log(\"Form data\", data);\n\n  const mode = searchParams.get('mode');\n  console.log(\"MODE = \", mode);\n\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({ message: \"Unsupported mode.\" }, { status: 422 });\n  }\n  console.log(data);\n\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n\n  const resp = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(authData),\n  });\n\n  if (resp.status === 422 || resp.status === 401) {\n    return resp;\n  }\n\n  if (!resp.ok) {\n    throw json({ message: \"Could not authenticate user\" }, { status: 500 });\n  }\n\n  const resData = await resp.json();\n  const token = resData.token;\n\n  //  так можна, але той бекенд повертає фігню по експерейшину, тому я вручну поставлю ескп\n  const dataToken = jwt(token);\n\n  localStorage.setItem(\"token\", token);\n  localStorage.setItem(\"email\", dataToken.email);\n  localStorage.setItem(\"exp\", dataToken.exp);\n\n  return redirect(\"/\");\n};"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,GAAG,MAAM,YAAY;AAAC;AAC7B,SAASC,kBAAkB,GAAG;EAC5B,oBAAO,QAAC,QAAQ;IAAA;IAAA;IAAA;EAAA,QAAG;AACrB;AAAC,KAFQA,kBAAkB;AAI3B,eAAeA,kBAAkB;AAEjC,OAAO,eAAeC,MAAM,OAAc;EAAA,IAAb;IAAEC;EAAQ,CAAC;EACtCC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,OAAO,CAAC;EACjC,MAAMG,YAAY,GAAG,IAAIC,GAAG,CAACJ,OAAO,CAACK,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAG,MAAMN,OAAO,CAACO,QAAQ,EAAE;EACrCN,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEI,IAAI,CAAC;EAE9B,MAAME,IAAI,GAAGL,YAAY,CAACM,GAAG,CAAC,MAAM,CAAC;EACrCR,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEM,IAAI,CAAC;EAE5B,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC,MAAMd,IAAI,CAAC;MAAEgB,OAAO,EAAE;IAAoB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC/D;EACAV,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;EAEjB,MAAMM,QAAQ,GAAG;IACfC,KAAK,EAAEP,IAAI,CAACG,GAAG,CAAC,OAAO,CAAC;IACxBK,QAAQ,EAAER,IAAI,CAACG,GAAG,CAAC,UAAU;EAC/B,CAAC;EAED,MAAMM,IAAI,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGR,IAAI,EAAE;IACxDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAIG,IAAI,CAACJ,MAAM,KAAK,GAAG,IAAII,IAAI,CAACJ,MAAM,KAAK,GAAG,EAAE;IAC9C,OAAOI,IAAI;EACb;EAEA,IAAI,CAACA,IAAI,CAACO,EAAE,EAAE;IACZ,MAAM5B,IAAI,CAAC;MAAEgB,OAAO,EAAE;IAA8B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACzE;EAEA,MAAMY,OAAO,GAAG,MAAMR,IAAI,CAACrB,IAAI,EAAE;EACjC,MAAM8B,KAAK,GAAGD,OAAO,CAACC,KAAK;;EAE3B;EACA,MAAMC,SAAS,GAAG5B,GAAG,CAAC2B,KAAK,CAAC;EAE5BE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;EACpCE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,SAAS,CAACZ,KAAK,CAAC;EAC9Ca,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEF,SAAS,CAACG,GAAG,CAAC;EAE1C,OAAOjC,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}